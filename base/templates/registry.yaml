---
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry
  namespace: {{ .Release.Namespace }}
data:
  config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      delete:
        enabled: true
      filesystem:
        rootdirectory: /var/lib/registry
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
---
apiVersion: v1
kind: Service
metadata:
  name: registry
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - port: 5000
      protocol: TCP
      targetPort: 5000
      nodePort: 30050
  selector:
    app: registry
  type: NodePort

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: registry
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: registry
  replicas: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      partition: 0
  revisionHistoryLimit: 10
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: registry
  template:
    metadata:
      labels:
        app: registry
    spec:
      containers:
      - name: docker-private-registry
        image: registry:2.8.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
          name: registry
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 6
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 6
        startupProbe:
          httpGet:
            path: /
            port: 5000
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 6
        volumeMounts:
        - name: data
          mountPath: /var/lib/registry
        - name: config
          mountPath: /etc/docker/registry/config.yml
          subPath: config.yml
      volumes:
      - name: config
        configMap:
          name: registry
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: registry-gc
  namespace: {{ .Release.Namespace }}
spec:
  schedule: "0 */6 * * *" # Runs every 6 hours
  timezone: "Etc/UTC"  # Set the timezone for the cron schedule
  concurrencyPolicy: Forbid  # Prevent concurrent jobs from running
  suspend: false  # Set to true to suspend the cron job
  successfulJobsHistoryLimit: 3  # Number of successful job history to keep
  failedJobsHistoryLimit: 1  # Number of failed job history to keep
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: garbage-collect
            image: registry:2.8.3
            imagePullPolicy: IfNotPresent
            command:
            - /bin/registry
            - garbage-collect
            - /etc/docker/registry/config.yml
            volumeMounts:
            - name: config
              mountPath: /etc/docker/registry/config.yml
              subPath: config.yml
            - name: data
              mountPath: /var/lib/registry
          restartPolicy: Never
          volumes:
          - name: config
            configMap:
              name: registry
          - name: data
            persistentVolumeClaim:
              claimName: data-registry-0
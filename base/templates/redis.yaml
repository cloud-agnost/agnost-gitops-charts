{{ $secret := (lookup "v1" "Secret" .Release.Namespace "redis") }}
apiVersion: v1
kind: Secret
metadata:
  name: redis
  namespace: {{ .Release.Namespace }}
type: Opaque
stringData:
  {{ if $secret }}
  password: {{ $secret.data.password | b64dec }}
  {{ else }}
  password: {{ derivePassword 1 "long" .Release.Name .Chart.Name uuidv4 | b64enc | trimSuffix "=" | quote }}
  {{ end }}
  hostname: redis.{{ .Release.Namespace }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis
  namespace: {{ .Release.Namespace }}
data:
  redis.conf: |
    bind 0.0.0.0
    protected-mode yes
    port 6379
    requirepass __REDIS_PASSWORD__
    dir /data
    appendonly yes

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: redis
  replicas: 1
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      partition: 0
  revisionHistoryLimit: 10
  podManagementPolicy: OrderedReady
  persistentVolumeClaimRetentionPolicy: 
    whenDeleted: Retain
    whenScaled: Retain
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      initContainers:
      - name: init
        image: alpine:latest
        command: ["/bin/sh", "-c", "apk add --no-cache sed && sed 's/__REDIS_PASSWORD__/'$REDIS_PASSWORD'/g' /redis-master/redis.conf > /tmp/redis-subst.conf"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: password
        volumeMounts:
        - name: config
          mountPath: /redis-master
        - name: tmp
          mountPath: /tmp
      containers:
      - name: redis
        image:  docker.io/redis:7.2.5
        command: ["redis-server", "/tmp/redis-subst.conf"]
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 500m
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: password
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 6
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 2
        volumeMounts:
        - name: data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: redis
      - name: tmp
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 512Mi

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  clusterIP: None
  selector:
    app: redis
